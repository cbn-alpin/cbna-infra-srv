version: "3.9"

x-depends_on:
  &default-depends_on
  gefiproj-postgres:
    condition: service_healthy

x-logging:
  &default-logging
  driver: "json-file"
  options:
    max-size: 4m
    max-file: 10

services:

  gefiproj-postgres:
    build:
      context: ./postgres/build/
      dockerfile: Dockerfile
      args:
        - TZ=${TZ:-Europe/Paris}
    image: cbna/gefiproj-db:postgres-15.3-bookworm
    # See: https://hub.docker.com/_/postgres
    container_name: gefiproj-postgres
    hostname: "${HOSTNAME}_gefiproj-postgres"
    restart: unless-stopped
    environment:
      TZ: ${TZ:-Europe/Paris}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_HOST_IP-127.0.0.1}:${POSTGRES_HOST_PORT-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready --quiet --username=${POSTGRES_USER} --dbname=${POSTGRES_DB} || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging: *default-logging
    volumes:
      - ./postgres/initdb:/docker-entrypoint-initdb.d/
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf
      - data-postgres-storage:/var/lib/postgresql/data
      - socket-postgres-storage:/var/run/postgresql
    command: postgres -c config_file=/etc/postgresql/postgresql.conf

  gefiproj-postgres-cli:
    # Usage:
    #  - create a dump: `docker compose run --rm gefiproj-postgres-cli /backups/backup.sh`
    #  - restore a dump: `docker compose run --rm gefiproj-postgres-cli /restore/restore.sh -d "2023-08-17_backup_dbprod.sql"`
    image: postgres:15.3-bookworm
    container_name: gefiproj-postgres-cli
    restart: "no"
    profiles: ["restore"]
    depends_on:
      gefiproj-postgres:
        condition: service_healthy
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: gefiproj-postgres
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_RESTORE_FILE: ${POSTGRES_RESTORE_FILE}
    volumes:
      - ${POSTGRES_BACKUPS_DIR-./postgres/backups}:/backups/
      - ${POSTGRES_RESTORE_DIR-./postgres/restore}:/restore/
      - socket-postgres-storage:/var/run/postgresql

  gefiproj-webhook:
    # See: https://awesomeprogrammer.com/blog/2021/04/18/deploy-docker-container-with-http-webhook-the-easy-way/
    build:
      context: ./webhook/build/
      dockerfile: Dockerfile
      args:
        - TZ=${TZ:-Europe/Paris}
    image: cbna/gefiproj-webhook:webhook-2.8.1
    container_name: gefiproj-webhook
    hostname: "${HOSTNAME}_gefiproj-webhook"
    restart: unless-stopped
    expose:
      - 9000
    environment:
      VIRTUAL_HOST: ${WEBHOOK_DOMAIN}
      LETSENCRYPT_HOST: ${WEBHOOK_DOMAIN}
    healthcheck:
      # WARNING: use CMD-SHELL for /bin/sh as default in container
      test: ["CMD-SHELL", "curl --fail --silent http://localhost:9000/ || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 3
    logging: *default-logging
    command: ["-verbose", "-hooks=/etc/webhook/hooks.json","-hotreload"]
    volumes:
      # we're giving control to docker on the host for redeploy.sh script !
      - /var/run/docker.sock:/var/run/docker.sock
      - ./webhook/hooks.json:/etc/webhook/hooks.json
      - ./webhook/scripts/:/var/scripts/:ro
      - ./../:/var/docker-repos/:ro

  gefiproj-api:
    image: cbna/gefiproj-api:main
    # See: https://hub.docker.com/r/cbn-alpin/gefiproj-api
    container_name: gefiproj-api
    hostname: "${HOSTNAME}_gefiproj-api"
    restart: unless-stopped
    depends_on: *default-depends_on
    expose:
      - 5000
    environment:
      TZ: ${TZ:-Europe/Paris}
      VIRTUAL_HOST: "${GEFIPROJ_DOMAIN_API}"
      LETSENCRYPT_HOST: "${GEFIPROJ_DOMAIN_API}"
    env_file:
      - .env.api
    logging: *default-logging
    volumes:
      - config-api-storage:/home/app/web/config/
      - logs-api-storage:/var/logs/

  gefiproj-webapp:
    image: cbna/gefiproj-webapp:main
    # See: https://hub.docker.com/r/cbna/gefiproj-webapp
    container_name: gefiproj-webapp
    hostname: "${HOSTNAME}_gefiproj-webapp"
    restart: unless-stopped
    depends_on:
      - gefiproj-api
    environment:
      TZ: ${TZ:-Europe/Paris}
      VIRTUAL_HOST: "${GEFIPROJ_DOMAIN_WEB}"
      LETSENCRYPT_HOST: "${GEFIPROJ_DOMAIN_WEB}"
    healthcheck:
      test: curl --fail --silent http://localhost:80/ || exit 1
      interval: 10s
      timeout: 10s
      retries: 3
    logging: *default-logging


volumes:
  data-postgres-storage:
  socket-postgres-storage:
  config-api-storage:
  logs-api-storage:

networks:
  default:
    name: nginx-proxy
    external: true
